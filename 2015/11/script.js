// Generated by CoffeeScript 1.9.2
(function() {
  var convertToChars, convertToInt, converted, easiFy, isPwValid, loopThrough, nextPwd, oldPwd, pwValidity, pwdInInt, threeInARow, twoDuplicates, validChars;

  oldPwd = "hepxxzaa";

  easiFy = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];

  threeInARow = function(arr) {
    var i, j;
    for (i = j = 0; j <= 6; i = ++j) {
      if (arr[i] + 1 === arr[i + 1] && arr[i] + 2 === arr[i + 2]) {
        return true;
      }
    }
    return false;
  };

  validChars = function(arr) {
    var i, j, len;
    for (j = 0, len = arr.length; j < len; j++) {
      i = arr[j];
      if (i === 8 || i === 11 || i === 14) {
        return false;
      }
    }
    return true;
  };

  twoDuplicates = function(arr) {
    var dup, i, j, len, prev;
    dup = 0;
    prev = void 0;
    for (j = 0, len = arr.length; j < len; j++) {
      i = arr[j];
      if (i === prev) {
        dup++;
        prev = void 0;
      } else {
        prev = i;
      }
    }
    if (dup >= 2) {
      return true;
    }
    return false;
  };

  convertToInt = function(string) {
    var char, int, j, len;
    int = [];
    for (j = 0, len = string.length; j < len; j++) {
      char = string[j];
      int.push(easiFy.indexOf(char));
    }
    return int;
  };

  convertToChars = function(arr) {
    var i, j, len, string;
    string = "";
    for (j = 0, len = arr.length; j < len; j++) {
      i = arr[j];
      string += easiFy[i];
    }
    return string;
  };

  isPwValid = function(pw) {
    if (threeInARow(pw) && validChars(pw) && twoDuplicates(pw)) {
      return true;
    } else {
      return false;
    }
  };

  loopThrough = function(index) {
    while (nextPwd[index] !== 25) {
      nextPwd[index]++;
      isPwValid(nextPwd);
    }
    return nextPwd[index] = 0;
  };

  pwdInInt = convertToInt(oldPwd);

  nextPwd = pwdInInt;

  debugger;

  while (nextPwd[0] !== 26) {
    while (nextPwd[1] !== 26) {
      while (nextPwd[2] !== 26) {
        while (nextPwd[3] !== 26) {
          while (nextPwd[4] !== 26) {
            while (nextPwd[5] !== 26) {
              while (nextPwd[6] !== 26) {
                while (nextPwd[7] !== 26) {
                  pwValidity = isPwValid(nextPwd);
                  if (pwValidity) {
                    converted = convertToChars(nextPwd);
                    console.log(converted, "is valid");
                    return;
                  }
                  nextPwd[7]++;
                }
                nextPwd[7] = 0;
                nextPwd[6]++;
              }
              nextPwd[6] = 0;
              nextPwd[5]++;
            }
            nextPwd[5] = 0;
            nextPwd[4]++;
          }
          nextPwd[4] = 0;
          nextPwd[3]++;
        }
        nextPwd[3] = 0;
        nextPwd[2]++;
      }
      nextPwd[2] = 0;
      nextPwd[1]++;
    }
    nextPwd[1] = 0;
    nextPwd[0]++;
  }

  nextPwd[0] = 0;

}).call(this);
