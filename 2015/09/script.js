// Generated by CoffeeScript 1.9.2
(function() {
  var addToDestinationsArray, d, d1, d2, dest, dest1, dest2, dest3, dest4, dest5, dest6, dest7, dest8, dist, distances, distancesArray, distancesString, filteredDest, filteredDest2, filteredDest3, filteredDest4, filteredDest5, filteredDest6, filteredDest7, filteredDistances, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, longestRide, m, n, o, p, q, r, s, shortestRide, t, traject,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  distancesString = "Faerun to Norrath = 129 Faerun to Tristram = 58 Faerun to AlphaCentauri = 13 Faerun to Arbre = 24 Faerun to Snowdin = 60 Faerun to Tambi = 71 Faerun to Straylight = 67 Norrath to Tristram = 142 Norrath to AlphaCentauri = 15 Norrath to Arbre = 135 Norrath to Snowdin = 75 Norrath to Tambi = 82 Norrath to Straylight = 54 Tristram to AlphaCentauri = 118 Tristram to Arbre = 122 Tristram to Snowdin = 103 Tristram to Tambi = 49 Tristram to Straylight = 97 AlphaCentauri to Arbre = 116 AlphaCentauri to Snowdin = 12 AlphaCentauri to Tambi = 18 AlphaCentauri to Straylight = 91 Arbre to Snowdin = 129 Arbre to Tambi = 53 Arbre to Straylight = 40 Snowdin to Tambi = 15 Snowdin to Straylight = 99 Tambi to Straylight = 70";

  dest = [];

  distances = {};

  traject = "";

  shortestRide = 500;

  longestRide = 500;

  distancesArray = distancesString.split(" ");

  filteredDistances = distancesArray.filter(function(distance) {
    return distance !== "to" && distance !== "=";
  });

  addToDestinationsArray = function(destination) {
    if (indexOf.call(dest, destination) < 0) {
      return dest.push(destination);
    }
  };

  for (i = k = 0, len = filteredDistances.length; k < len; i = ++k) {
    d = filteredDistances[i];
    switch (i % 3) {
      case 0:
        (function() {
          addToDestinationsArray(d);
          return traject = d + "-";
        })();
        break;
      case 1:
        (function() {
          addToDestinationsArray(d);
          return traject += d;
        })();
        break;
      case 2:
        (function() {
          return distances[traject] = d * 1;
        })();
    }
  }

  for (l = 0, len1 = dest.length; l < len1; l++) {
    dest1 = dest[l];
    filteredDest = dest.filter(function(filteredDest) {
      return filteredDest !== dest1;
    });
    for (m = 0, len2 = filteredDest.length; m < len2; m++) {
      dest2 = filteredDest[m];
      filteredDest2 = filteredDest.filter(function(filteredDest2) {
        return filteredDest2 !== dest2;
      });
      for (n = 0, len3 = filteredDest2.length; n < len3; n++) {
        dest3 = filteredDest2[n];
        filteredDest3 = filteredDest2.filter(function(filteredDest3) {
          return filteredDest3 !== dest3;
        });
        for (o = 0, len4 = filteredDest3.length; o < len4; o++) {
          dest4 = filteredDest3[o];
          filteredDest4 = filteredDest3.filter(function(filteredDest4) {
            return filteredDest4 !== dest4;
          });
          for (p = 0, len5 = filteredDest4.length; p < len5; p++) {
            dest5 = filteredDest4[p];
            filteredDest5 = filteredDest4.filter(function(filteredDest5) {
              return filteredDest5 !== dest5;
            });
            for (q = 0, len6 = filteredDest5.length; q < len6; q++) {
              dest6 = filteredDest5[q];
              filteredDest6 = filteredDest5.filter(function(filteredDest6) {
                return filteredDest6 !== dest6;
              });
              for (r = 0, len7 = filteredDest6.length; r < len7; r++) {
                dest7 = filteredDest6[r];
                filteredDest7 = filteredDest6.filter(function(filteredDest7) {
                  return filteredDest7 !== dest7;
                });
                for (s = 0, len8 = filteredDest7.length; s < len8; s++) {
                  dest8 = filteredDest7[s];
                  dist = 0;
                  for (i = t = 1; t <= 7; i = ++t) {
                    j = i + 1;
                    d1 = eval("dest" + i);
                    d2 = eval("dest" + j);
                    dist += distances[d1 + "-" + d2] || distances[d2 + "-" + d1];
                  }
                  if (dist < shortestRide) {
                    shortestRide = dist;
                    console.log("shortestRide", shortestRide);
                  }
                  if (dist > longestRide) {
                    longestRide = dist;
                    console.log("longestRide", longestRide);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  console.log(shortestRide);

}).call(this);
